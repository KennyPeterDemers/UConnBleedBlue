@page "/mikey"

@inject IWebHostEnvironment Env
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

@implements IDisposable

<script>
    function addEscapeListener(dotNetHelper) {
        window.addEventListener('keydown', function (e) {
            if (e.key === "Escape") {
                dotNetHelper.invokeMethodAsync("CloseVideoFromJS");
            }
        });
    }
</script>

<style>
    .video-grid {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }
    .video-thumb {
        width: 100%;
        max-width: 200px;
        padding: 10px;
        box-sizing: border-box;
        cursor: pointer;
        text-align: center;
    }
    .video-column {
        width: 20%;
        padding: 0.5rem;
    }
    .overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.95);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
    }
    .overlay-content {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        max-width: 90%;
        max-height: 90%;
        padding: 1rem;
        overflow: auto;
    }

    .centered-paragraph {
        max-width: 70%;
        margin: 20px auto;
        padding: 10px;
        text-align: center;
        font-size: 1.5rem;
        color: navy;
        font-weight: bold;
        line-height: 1.6;
    }
    @@media (max-width: 768px) {
        .video-column {
            width: 100% !important;
        }
    }
    @@media (min-width: 769px) and (max-width: 1024px) {
        .video-column {
            width: 50% !important;
        }
    }
    @@media (min-width: 1025px) {
        .video-column {
            width: 20%;
        }
    }
</style>


<p class="centered-paragraph">Mikey Home Videos</p>
<!-- Video content goes here -->
@if (videos.Count > 0)
{
    <div style="margin: 0 auto; padding: 0; width: 100%; max-width: 1200px;">
        <div style="display: flex; flex-wrap: wrap; width: 100%; overflow: auto; text-align: center;">
            <!-- Title Column 1 -->
            <div class="video-column">
                @foreach (var video in videos.Take(@chunkSize[0]))
                {
                    <button class="btn btn-link w-100 text-start" @onclick="() => SelectVideo(video)">
                        @video.Title
                    </button>
                }
            </div>

            <!-- Title Column 2 -->
            <div class="video-column">
                @foreach (var video in videos.Skip(@chunkSize[0]).Take(@chunkSize[1]))
                {
                    <button class="btn btn-link w-100 text-start" @onclick="() => SelectVideo(video)">
                        @video.Title
                    </button>
                }
            </div>

            <!-- Title Column 3 -->
            <div class="video-column">
                @foreach (var video in videos.Skip(chunkSize[0] + chunkSize[1]).Take(@chunkSize[2]))
                {
                    <button class="btn btn-link w-100 text-start" @onclick="() => SelectVideo(video)">
                        @video.Title
                    </button>
                }
            </div>

            <!-- Title Column 4 -->
            <div class="video-column">
                @foreach (var video in videos.Skip(@chunkSize[0] + chunkSize[1] + chunkSize[2]).Take(@chunkSize[3]))
                {
                    <button class="btn btn-link w-100 text-start" @onclick="() => SelectVideo(video)">
                        @video.Title
                    </button>
                }
            </div>

            <!-- Title Column 5 -->
            <div class="video-column">
                @foreach (var video in videos.Skip(@chunkSize[0] + chunkSize[1] + chunkSize[2] + chunkSize[3]).Take(@chunkSize[4]))
                {
                    <button class="btn btn-link w-100 text-start" @onclick="() => SelectVideo(video)">
                        @video.Title
                    </button>
                }
            </div>
        </div>
    </div>
}
<!-- Fullscreen Overlay -->
@if (selectedVideo != null)
{
    <div class="overlay" @onclick="CloseVideo">
        <div class="overlay-content" @onclick:stopPropagation="true">
            <h2 style="color: white;">@selectedVideo.Title</h2>
            <div class="video-wrapper">
                <video controls autoplay>
                    <source src="@selectedVideo.Url" type="@selectedVideo.MimeType" />
                    Your browser does not support the video tag.
                </video>
            </div>
        </div>
    </div>
}

@code {
    DotNetObjectReference<VideoGalleryMikey>? dotNetRef;

    class VideoItem
    {
        public string Title { get; set; } = string.Empty;
        public string Url { get; set; } = string.Empty;
        public string MimeType { get; set; } = string.Empty;
    }

    List<VideoItem> videos = new List<VideoItem>();

    VideoItem? selectedVideo = null;

    void OpenVideo(VideoItem videoItem) => selectedVideo = videoItem;
    void CloseVideo() => selectedVideo = null;

    string pathVideos = $"{Directory.GetCurrentDirectory()}{@"\wwwroot\videos\mikey"}";

    string err = "";

    const int numVideoCol = 5;
    int[] chunkSize = new int[numVideoCol];

    protected override void OnInitialized()
    {
        try
        {
            string videoFolder = Path.Combine(Env.WebRootPath,@"videos\mikey");

            if (Directory.Exists(videoFolder))
            {
                var files = Directory.GetFiles(videoFolder, "*.*")
                    .Where(f => f.EndsWith(".mp4", StringComparison.OrdinalIgnoreCase) || f.EndsWith(".mov", StringComparison.OrdinalIgnoreCase));

                videos = files.Select(path =>
                {
                    var fileName = Path.GetFileName(path);
                    var ext = Path.GetExtension(path).ToLowerInvariant();
                    return new VideoItem
                        {
                            Title = Path.GetFileNameWithoutExtension(path),
                            Url = $"videos/mikey/{fileName}",
                            MimeType = ext == ".mov" ? "video/quicktime" : "video/mp4"
                        };
                }).ToList();
                int extraChunk = videos.Count % numVideoCol;
                for (int i = 1; i <= numVideoCol; i++)
                {
                    chunkSize[i-1] = videos.Count / numVideoCol;
                    if (i <= extraChunk)
                    {
                        chunkSize[i-1]++;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            err = ex.Message;
        }
    }

    void SelectVideo(VideoItem video)
    {
        selectedVideo = video;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("addEscapeListener", dotNetRef);
        }
    }

    [JSInvokable]
    public void CloseVideoFromJS()
    {
        selectedVideo = null;
        StateHasChanged();
    }

    public void Dispose()
    {
        dotNetRef?.Dispose();
    }
}


@page "/ticket-request-form"

@using UConnBleedBlue.Models
@using MailKit.Net.Smtp
@using MailKit.Security

@inject PlayersService PlayerService
@inject NavigationManager Nav

<h2>Register To Our UConn Football Alumni Group & Request Complementary Tickets To The Game</h2>
<br />

<h2 class="headline">
    <span>All fields are required</span>
</h2>

<EditForm Model="@EmailRequest" OnSubmit="Submit" FormName="TributeToAndy">
    <div class="form-section">

        <label>
            Name (First & Last):
            <InputText @bind-Value="player.Name" class="text-input" />
        </label>

        <label>
            Email Address:
            <InputText @bind-Value="player.Email" class="text-input" type="email" />
        </label>

        <label>
            Last Year (Fall) You Played :
            <InputText @bind-Value="player.FinalYear" class="year-input" />
        </label>

        <br />

        <!-- IMPORTANT: no @onclick here; let the form handle submit -->
        <button type="submit" class="row-header ticket-btn center-btn" disabled="@isSubmitting">
            @((isSubmitting) ? "Submitting..." : "Request Tickets From UConn Ticket Office")
        </button>

        <br />

        <h2>
            <span>Pressing the button above will take you to the UConn Ticket Office Site</span>
        </h2>
        <h2>
            <span>PSA - refers to Prospective Student Athlete</span>
        </h2>
        <h2>
            <span>For the "Group" field: Enter "Bleed Blue With Andy"</span>
        </h2>
        <h2>
            <span>Note: All tickets will be distributed at the tailgate</span>
        </h2>
        <br />

        <label class="labelError">@emailStatus</label>
    </div>
</EditForm>

<style>
    h1, h2 {
        display: block;
        margin: 1rem auto;
        padding: 0.5rem;
        text-align: center;
        font-weight: bold;
        color: blue;
    }

    h1 { font-size: 2rem; }
    h2 { font-size: 1.5rem; }

    /* Keep all H2s after the button on one line and truly centered */
    button ~ h2 {
        display: inline-block;
        white-space: nowrap;
        position: relative;
        left: 50%;
        transform: translateX(-50%);
        margin: 0.5rem 0;
        padding-left: 0;
        padding-right: 0;
    }

    /* Headline animation for the "All fields are required" line */
    .headline { text-align: center; }

    .headline span {
        display: inline-block;
        white-space: nowrap;
        font-weight: bold;
        color: purple;
        font-size: clamp(1rem, 4vw, 2rem);
        animation: fadeSlide 5s ease-in-out infinite alternate;
    }

    @@keyframes fadeSlide {
        0%   { opacity: 0; transform: translateY(-10px); }
        100% { opacity: 1; transform: translateY(0); }
    }

    /* Form layout */
    .form-section {
        width: min(92vw, 60rem);
        margin: 0 auto;
        padding: 0 1rem;
    }

    .form-section label {
        display: block;
        margin-bottom: 0.5rem;
        font-size: 1.2rem;
        color: blue;
    }

    .form-section input[type="text"],
    .form-section input[type="email"],
    .form-section input[type="number"] {
        width: 100%;
        height: 2.5rem;
        padding: 0.4rem;
        font-size: 1rem;
        color: blue;
        margin-bottom: 1rem;
        box-sizing: border-box;
    }

    .year-input {
        width: auto;
        max-width: 6ch;
        text-align: center;
    }

    /* Button styles */
    .ticket-btn {
        background-color: #004aad; /* UConn blue */
        color: #fff;
        border: none;
        border-radius: 8px;
        padding: 0.5rem 1rem;
        cursor: pointer;
        transition: background-color .2s ease-in-out, opacity .2s ease-in-out;
    }

    .ticket-btn:hover,
    .ticket-btn:focus { background-color: #002766; outline: none; }

    .ticket-btn:disabled { opacity: 0.6; cursor: not-allowed; }

    .center-btn { display: block; margin: 0.625rem auto; }

    .labelError {
        color: red !important; /* override .form-section label { color: blue; } */
        font-size: clamp(1.8rem, 3.5vw, 2.4rem); /* responsive bigger font */
        font-weight: bold;
        text-align: center;
        margin-top: 1rem;
    }

    /* Larger headings on desktop */
    @@media (min-width: 1000px) {
        h1 { font-size: 2.5rem; }
        h2 { font-size: 2rem; }

        /* shrink name & email inputs on desktop */
        .text-input:not(.year-input) {
            max-width: 50%;
            display: inline-block;
            vertical-align: middle;
            margin-left: 0.5rem;
        }
    }

    .text-input {
        width: 100%;
        max-width: none;
        box-sizing: border-box;
    }

    /* Reduce vertical spacing for mobile devices */
    @@media (max-width: 600px) {
        h1, h2 { margin: 0.5rem 0; padding: 0.25rem; }

        .form-section label { margin-bottom: 0.25rem; }

        .form-section input[type="text"],
        .form-section input[type="email"],
        .form-section input[type="number"] {
            margin-bottom: 0.5rem;
            height: 2.2rem;
        }

        /* Let the post-button notes wrap and center normally */
        button ~ h2 {
            display: block;
            white-space: normal;
            left: auto;
            transform: none;
            text-align: center;
            margin: 0.25rem auto;
            padding: 0 0.5rem;
        }

        button ~ h2 span {
            overflow-wrap: anywhere;
            word-break: normal;
        }

        .form-section { padding-bottom: 4rem; }
        html, body { overflow-x: hidden; }
        br { display: none; }

    }
</style>

@code {
    // Match the EditForm's FormName
    [SupplyParameterFromForm(FormName = "TributeToAndy")]
    EmailRequest EmailRequest { get; set; } = new();

    [Parameter] public bool IsChecked { get; set; } = false;
    [Parameter] public bool IsAttending { get; set; } = false;

    private string emailStatus = "";
    private bool isSubmitting = false;   // re-entrancy guard

    private Timer? timer;

    public Player player = new Player();

    // UConn Ticket Request URL
    private const string TicketUrl =
        "https://tickets.armssoftware.com/ALPWa8E8?t=QP30mzW7&ae=N9oBgWwZ";

    private void OnTimerEvent(object? state)
    {
        emailStatus = "";
        IsChecked = false;
        InvokeAsync(StateHasChanged);
    }

    private async Task Submit()
    {
        if (isSubmitting) return;     // prevent double-exec
        isSubmitting = true;
        StateHasChanged();

        try
        {
            if (timer != null) { timer.Dispose(); }

            if (string.IsNullOrWhiteSpace(player.Name) || player.Name.Trim().Length < 3)
            {
                emailStatus = "Enter a valid name";
                timer = new Timer(OnTimerEvent, null, 5000, Timeout.Infinite);
                return;
            }

            if (string.IsNullOrWhiteSpace(player.Email) ||
                player.Email.Length < 7 ||
                !player.Email.Contains(".") ||
                !player.Email.Contains("@"))
            {
                emailStatus = "Enter a valid email address";
                timer = new Timer(OnTimerEvent, null, 5000, Timeout.Infinite);
                return;
            }

            if (string.IsNullOrWhiteSpace(player.FinalYear) ||
                !int.TryParse(player.FinalYear, out var year) ||
                year < 1960)
            {
                emailStatus = "Last year played is invalid - must be 4 digits";
                timer = new Timer(OnTimerEvent, null, 5000, Timeout.Infinite);
                return;
            }

            // force TLS 1.2 connection if your application requires
            System.Net.ServicePointManager.SecurityProtocol = System.Net.SecurityProtocolType.Tls12;

            string server = "mail5019.site4now.net";
            int port = 587; // 587 for StartTls
            string from = "kenny@andybleedblue.com";
            string password = "UConnBleedBlue62$";
            string to = "kenny@andybleedblue.com";  // SharkAsp.net will forward it to kpdemers073@gmail.com

            var message = new MimeKit.MimeMessage();
            message.From.Add(new MimeKit.MailboxAddress(EmailRequest.From, from));
            message.To.Add(new MimeKit.MailboxAddress("kpdemers073.com", to));
            message.Subject = "Player Attending";
            message.Body = new MimeKit.TextPart("plain")
            {
                Text = $"{player.Name} , {player.Email} , {player.FinalYear} , {player.AttendingTailgate} , {player.NumberOfTickets}"
            };

            using (var client = new MailKit.Net.Smtp.SmtpClient())
            {
                client.Connect(server, port, MailKit.Security.SecureSocketOptions.StartTls);
                client.Authenticate(from, password);
                client.Send(message);
                client.Disconnect(true);
            }

            EmailRequest.From = "";
            EmailRequest.FromEmail = "";
            EmailRequest.Tribute = "";

            emailStatus = "Thanks! Your Information Was Successfully Submitted";
            StateHasChanged();

            await Task.Delay(2000);
            Nav.NavigateTo(TicketUrl, forceLoad: true);
        }
        catch (Exception ex)
        {
            emailStatus = "Internal Error - " + ex.Message;
            timer = new Timer(OnTimerEvent, null, 5000, Timeout.Infinite);
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }
}
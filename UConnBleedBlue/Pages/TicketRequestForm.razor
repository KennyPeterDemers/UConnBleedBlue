@page "/ticket-request-form"

@using UConnBleedBlue.Models
@using MailKit.Net.Smtp
@using MailKit.Security
@using Microsoft.AspNetCore.Components.Web  // needed for FocusAsync

@inject PlayersService PlayerService
@inject NavigationManager Nav

@implements IDisposable

<h2>Register To Our UConn Football Alumni Group & Request Complementary Tickets To The Game</h2>
<br />

<h2 class="headline">
    <span>All fields are required</span>
</h2>

<ErrorBoundary>
    <ChildContent>
        <EditForm Model="@EmailRequest" OnSubmit="Submit" FormName="TributeToAndy">
            <div class="form-section">

                <label>
                    Name (First & Last):
                    <input class="text-input"
                           @bind="player.Name"
                           @bind:event="oninput"
                           type="text"
                            @ref="nameInput" />
                </label>

                <label>
                    Email Address:
                    <input class="text-input"
                           @bind="player.Email"
                           @bind:event="oninput"
                           type="email" />
                </label>

                <label>
                    Last Year (Fall) You Played (4 digits):
                    <input class="year-input"
                           @bind="player.FinalYear"
                           @bind:event="oninput"
                           inputmode="numeric"
                           pattern="[0-9]*"
                           type="text" />
                </label>

                <br />

                <button type="button"
                        class="row-header ticket-btn center-btn"
                        @onclick="OpenNotice"
                        disabled="@(!CanRegister() || isSubmitting)">
                    @((isSubmitting) ? "Submitting..." : "Register")
                </button>


                <label class="labelError">@emailStatus</label>
            </div>
        </EditForm>
    </ChildContent>
</ErrorBoundary>

@* Modal: shows only when showNotice is true *@
@if (showNotice)
{
    <div class="bb-modal-backdrop" @onclick="BackdropClick">
        <div class="bb-modal" role="dialog" aria-modal="true" aria-labelledby="bbModalTitle" @onclick:stopPropagation>
            <div class="bb-modal-header">
                <h3 id="bbModalTitle">Before Continuing To The Ticket Office Site</h3>
            </div>

            <div class="bb-modal-body">
                <ul class="bb-bullets">
                    <li><strong>PSA</strong> = Prospective Student Athlete.</li>
                    <li>For the <strong>Group</strong> field, enter <strong>“Bleed Blue With Andy”</strong>.</li>
                    <li>For the <strong>Title</strong> field, enter <strong>“FB Alum”</strong>.</li>
                    <li><strong>Note: All requested tickets will be distributed at the tailgate.</strong></li>
                    <li><strong> Don't forget to purchase tailgate parking. Getting assigned to the 'Blue' lot is on a 1st come 1st served basis.</strong></li>
                </ul>
            </div>

            <div class="bb-modal-footer">
                <button type="button"
                        class="bb-btn-secondary"
                        @onclick:preventDefault="true"
                        @onclick="CloseNotice">Return To Registration Form</button>

                <button type="button"
                        class="bb-btn-primary"
                        @onclick:preventDefault="true"
                        @onclick="GoToTicketOffice">Continue To Ticket Office Site</button>
            </div>                        
        </div>
    </div>
}


<style>
    h1, h2 {
        display: block;
        margin: 1rem auto;
        padding: 0.5rem;
        text-align: center;
        font-weight: bold;
        color: blue;
    }

    h1 { font-size: 2rem; }
    h2 { font-size: 1.5rem; }

    /* Keep all H2s after the button on one line and truly centered */
    button ~ h2 {
        display: inline-block;
        white-space: nowrap;
        position: relative;
        left: 50%;
        transform: translateX(-50%);
        margin: 0.5rem 0;
        padding-left: 0;
        padding-right: 0;
    }

    /* Headline animation for the "All fields are required" line */
    .headline { text-align: center; }

    .headline span {
        display: inline-block;
        white-space: nowrap;
        font-weight: bold;
        color: purple;
        font-size: clamp(1rem, 4vw, 2rem);
        animation: fadeSlide 5s ease-in-out infinite alternate;
    }

    @@keyframes fadeSlide {
        0%   { opacity: 0; transform: translateY(-10px); }
        100% { opacity: 1; transform: translateY(0); }
    }

    /* Form layout */
    .form-section {
        width: min(92vw, 60rem);
        margin: 0 auto;
        padding: 0 1rem;
    }

    .form-section label {
        display: block;
        margin-bottom: 0.5rem;
        font-size: 1.2rem;
        color: blue;
    }

    .form-section input[type="text"],
    .form-section input[type="email"],
    .form-section input[type="number"] {
        width: 100%;
        height: 2.5rem;
        padding: 0.4rem;
        font-size: 1rem;
        color: blue;
        margin-bottom: 1rem;
        box-sizing: border-box;
    }

    .year-input {
        width: auto;
        max-width: 6ch;
        text-align: center;
    }

    /* Button styles */
    .ticket-btn {
        background-color: #004aad; /* UConn blue */
        color: #fff;
        border: none;
        border-radius: 8px;
        padding: 0.5rem 1rem;
        cursor: pointer;
        transition: background-color 0.2s ease-in-out, color 0.2s ease-in-out;
    }

    .ticket-btn:hover,
    .ticket-btn:focus { background-color: #002766; outline: none; }

    .ticket-btn:disabled {
        background-color: #ccc !important; /* Light gray */
        color: #666 !important; /* Darker text */
        border: 2px solid #999 !important; /* Clear outline */
        opacity: 1; /* Remove fade so text is crisp */
        cursor: not-allowed;
    }

    .center-btn { display: block; margin: 0.625rem auto; }

    .labelError {
        color: red !important; /* override .form-section label { color: blue; } */
        font-size: clamp(1.8rem, 3.5vw, 2.4rem); /* responsive bigger font */
        font-weight: bold;
        text-align: center;
        margin-top: 1rem;
    }

    /* Larger headings on desktop */
    @@media (min-width: 1000px) {
        h1 { font-size: 2.5rem; }
        h2 { font-size: 2rem; }

        /* shrink name & email inputs on desktop */
        .text-input:not(.year-input) {
            max-width: 50%;
            display: inline-block;
            vertical-align: middle;
            margin-left: 0.5rem;
        }
    }

    .text-input {
        width: 100%;
        max-width: none;
        box-sizing: border-box;
    }

    /* Reduce vertical spacing for mobile devices */
    @@media (max-width: 600px) {
        h1, h2 { margin: 0.5rem 0; padding: 0.25rem; }

        .form-section label { margin-bottom: 0.25rem; }

        .form-section input[type="text"],
        .form-section input[type="email"],
        .form-section input[type="number"] {
            margin-bottom: 0.5rem;
            height: 2.2rem;
        }

        /* Let the post-button notes wrap and center normally */
        button ~ h2 {
            display: block;
            white-space: normal;
            left: auto;
            transform: none;
            text-align: center;
            margin: 0.25rem auto;
            padding: 0 0.5rem;
        }

        button ~ h2 span {
            overflow-wrap: anywhere;
            word-break: normal;
        }

        .form-section { padding-bottom: 4rem; }
        html, body { overflow-x: hidden; }
        br { display: none; }

    }

    /* Modal backdrop */
    .bb-modal-backdrop {
        position: fixed;
        inset: 0;
        background: rgba(0,0,0,0.55);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    /* Modal panel */
    .bb-modal {
        width: min(92vw, 720px);
        max-height: 80vh;
        background: #fff;
        border-radius: 12px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.25);
        display: flex;
        flex-direction: column;
    }

    /* Modal sections */
    .bb-modal-header,
    .bb-modal-footer {
        padding: 12px 16px;
        border-bottom: 1px solid #e6e6e6;
    }

    /* Modal header title */
    .bb-modal-header h3 {
        color: #004AAD; /* UConn blue */
        font-size: clamp(1.2rem, 3vw, 1.8rem); /* min 19px, scales up, max ~29px */
        margin: 0;
        font-weight: bold;
    }

    .bb-modal-footer {
        border-top: 1px solid #e6e6e6;
        border-bottom: 0;
        display: flex;
        gap: 8px;
        justify-content: flex-end;
    }

    .bb-modal-body {
        padding: 16px;
        overflow: auto;
    }

    /* Buttons in modal */
    .bb-icon-btn {
        background: transparent;
        border: 0;
        font-size: 24px;
        line-height: 1;
        cursor: pointer;
    }

    .bb-btn-primary, .bb-btn-secondary {
        padding: 8px 14px;
        border-radius: 8px;
        border: 1px solid transparent;
        cursor: pointer;
        font-weight: 600;
    }

    .bb-btn-primary {
        background: #0a58ca;
        color: #fff;
    }

    .bb-btn-secondary {
        background: #f5f5f5;
        color: #222;
    }

    /* List styling in modal */
    .bb-bullets {
        margin: 0;
        padding-left: 1.2rem;
    }

        .bb-bullets li {
            margin: 0.25rem 0;
        }

    /* Avoid tap highlight on iOS */
    .bb-modal, .bb-modal * {
        -webkit-tap-highlight-color: transparent;
    }
    /* Popup body text */
    .bb-modal-body {
        color: #004AAD; /* UConn blue */
        font-size: clamp(1rem, 2.5vw, 1.4rem); /* min 1rem, scales up, max 1.4rem */
        line-height: 1.5;
    }

    /* Make list items inside modal match the style */
    .bb-bullets li {
        color: inherit;
        font-size: inherit;
        margin-bottom: 0.5rem;
    }

</style>

@code {
    // Match the EditForm's FormName
    [SupplyParameterFromForm(FormName = "TributeToAndy")]
    EmailRequest EmailRequest { get; set; } = new();

    [Parameter] public bool IsChecked { get; set; } = false;
    [Parameter] public bool IsAttending { get; set; } = false;

    private string emailStatus = "";
    private bool isSubmitting = false;   // re-entrancy guard

    private Timer? timer;
    private bool _isDisposed;

    public Player player = new Player();

    private ElementReference nameInput;

    // UConn Ticket Request URL
    private const string TicketUrl =
        "https://tickets.armssoftware.com/ALPWa8E8?t=QP30mzW7&ae=N9oBgWwZ";

    private bool showNotice = false;

    protected override void OnInitialized()
    {
        player = new Player();  // ensures not null before first render
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await nameInput.FocusAsync();
        }
    }

    private async void OnTimerEvent(object? state)
    {
        if (_isDisposed) return;          // component is going away
        emailStatus = "";
        IsChecked = false;
        try
        {
            await InvokeAsync(StateHasChanged);
        }
        catch (ObjectDisposedException)
        {
            // ignore – happens if circuit/component is already gone
        }
    }

    private void Submit()
    {
        if (isSubmitting) return;     // prevent double-exec
        isSubmitting = true;
        StateHasChanged();

        try
        {
            if (timer != null) { timer.Dispose(); }

            if (string.IsNullOrWhiteSpace(player.Name) || player.Name.Trim().Length < 3)
            {
                emailStatus = "Enter a valid name";
                SetOneShotTimer(5000);
                return;
            }

            if (string.IsNullOrWhiteSpace(player.Email) ||
                player.Email.Length < 7 ||
                !player.Email.Contains(".") ||
                !player.Email.Contains("@"))
            {
                emailStatus = "Enter a valid email address";
                SetOneShotTimer(5000);
                return;
            }

            if (string.IsNullOrWhiteSpace(player.FinalYear) ||
                !int.TryParse(player.FinalYear, out var year) ||
                year < 1945 || year > 2024)
            {
                emailStatus = "Last year played is invalid - must be 4 digits";
                SetOneShotTimer(5000);
                return;
            }

            // force TLS 1.2 connection if your application requires
            System.Net.ServicePointManager.SecurityProtocol = System.Net.SecurityProtocolType.Tls12;

            string server = "mail5019.site4now.net";
            int port = 587; // 587 for StartTls
            string from = "kenny@andybleedblue.com";
            string password = "UConnBleedBlue62$";
            string to = "kenny@andybleedblue.com";  // SharkAsp.net will forward it to kpdemers073@gmail.com

            var message = new MimeKit.MimeMessage();
            message.From.Add(new MimeKit.MailboxAddress(EmailRequest.From, from));
            message.To.Add(new MimeKit.MailboxAddress("kpdemers073.com", to));
            message.Subject = "Player Attending";
            message.Body = new MimeKit.TextPart("plain")
            {
                Text = $"{player.Name} , {player.Email} , {player.FinalYear} , {player.AttendingTailgate} , {player.ExtraTickets}"
            };

            using (var client = new MailKit.Net.Smtp.SmtpClient())
            {
                client.Connect(server, port, MailKit.Security.SecureSocketOptions.StartTls);
                client.Authenticate(from, password);
                client.Send(message);
                client.Disconnect(true);
            }

            EmailRequest.From = "";
            EmailRequest.FromEmail = "";
            EmailRequest.Tribute = "";

            emailStatus = "Thanks! Your Information Was Successfully Submitted";
            StateHasChanged();

            StopTimer();                              // ✅ stop before navigation
            Nav.NavigateTo(TicketUrl, forceLoad: true);
        }
        catch (Exception ex)
        {
            emailStatus = "Internal Error - " + ex.Message;
            SetOneShotTimer(5000);
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }
    void OpenNotice() => showNotice = true;

    void CloseNotice() => showNotice = false;

    void BackdropClick() => CloseNotice();

    private bool CanRegister()
    {
        // Name check
        if (string.IsNullOrWhiteSpace(player.Name) || player.Name.Trim().Length < 3)
            return false;

        // Email check
        if (string.IsNullOrWhiteSpace(player.Email) ||
            player.Email.Length < 7 ||
            !player.Email.Contains(".") ||
            !player.Email.Contains("@"))
            return false;

        // Year check
        if (string.IsNullOrWhiteSpace(player.FinalYear) ||
            !int.TryParse(player.FinalYear, out var year) ||
            year < 1945 || year > 2024)
            return false;

        return true;
    }
    private void SetOneShotTimer(int ms)
    {
        StopTimer();
        timer = new Timer(OnTimerEvent, null, ms, Timeout.Infinite);
    }
    private void StopTimer()
    {
        timer?.Dispose();
        timer = null;
    }
    private void GoToTicketOffice()
    {
        showNotice = false;
        StopTimer();                          // ✅ prevent post-nav callbacks
        Nav.NavigateTo(TicketUrl, forceLoad: true);
    }

    public void Dispose()
    {
        _isDisposed = true;
        timer?.Dispose();
        timer = null;
    }
}